// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Documents {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  fileId            String?
  documentType      DocumentType     @default(OTHER)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  customer          User?            @relation(fields: [customerId], references: [id])
  customerId        String?          @db.ObjectId
  Case              Case?            @relation(fields: [caseId], references: [id])
  caseId            String?          @db.ObjectId
  providerCompany   ProviderCompany? @relation(fields: [providerCompanyId], references: [id])
  providerCompanyId String?          @db.ObjectId
  Question          Question[]
}

model CaseRequest {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  status            CaseRequestStatus @default(PENDING)
  applicantId       String            @db.ObjectId
  providerCompanyId String            @db.ObjectId
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  case              Case?             @relation(fields: [caseId], references: [id])
  caseId            String            @db.ObjectId
  deadline          DateTime?
  totalCost         Float?
  isProposal        Boolean?           @default(false)
}

type GeneralInfo {
  firstName      String?
  middleName     String?
  lastName       String?
  nationality    String?
  email          String?
  phone          String?
  passportFileId String?
  birthday       DateTime?
}

type EducationInfo {
  degree                   String?
  university               String?
  diplomaFileId            String?
  confirmationLetterFileId String?
}

type WorkInfo {
  contractType      String?
  contractFileId    String?
  jobTitle          String?
  yearsOfExperience String?
  monthlyIncome     Int?
  cvFileId          String?
  invoicesFilesIds  String[]
}

enum ApplicantFamilyMembers {
  SPOUSE
  CHILD
  PARTNER
  SPOUSE_AND_CHILD
  PARTNER_AND_CHILD
}

type Partner {
  name       String?
  middleName String?
  lastName   String?
  birthday   DateTime?
}

type Child {
  name       String?
  middleName String?
  lastName   String?
  birthday   DateTime?
}

type FamilyInfo {
  familyMembers ApplicantFamilyMembers?
  spouse        Partner?
  children      Child[]
}

model Case {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    CaseStatus @default(UNASSIGNED)
  isPrivate Boolean    @default(false)

  generalInfo GeneralInfo?
  education   EducationInfo?
  workInfo    WorkInfo?
  familyInfo  FamilyInfo?

  documents Documents[]

  employees    User[]   @relation(fields: [employeesIds], references: [id])
  employeesIds String[] @db.ObjectId

  providers    User[]   @relation("providers", fields: [providersIds], references: [id])
  providersIds String[] @db.ObjectId

  applicants    User[]   @relation("applicants", fields: [applicantsIds], references: [id])
  applicantsIds String[] @db.ObjectId

  providerCompany   ProviderCompany? @relation(fields: [providerCompanyId], references: [id])
  providerCompanyId String?          @db.ObjectId

  employerCompany   EmployerCompany? @relation(fields: [employerCompanyId], references: [id])
  employerCompanyId String?          @db.ObjectId

  caseRequest CaseRequest[]

  test Test[]
}

model ProviderCompany {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  email     String      @unique
  website   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  rating    Int         @default(0)
  employees User[]
  cases     Case[]
  Documents Documents[]

  @@unique([name, email])
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  externalId       String           @unique
  email            String           @unique
  firstName        String
  middleName       String?
  lastName         String
  employmentStatus EmploymentStatus @default(PENDING)
  birthday         DateTime?
  createdAt        DateTime         @default(now())
  userRole         UserRoles

  testId String[] @db.ObjectId
  Test   Test[]

  timeOffRequest TimeOffRequest[]
  timeOff        TimeOff[]

  timeOffRequestsForApproval TimeOffRequest[] @relation("approvedBy")

  documents Documents[]

  workExperience WorkExperience[]

  family         User[]  @relation("family")
  headOfFamily   User?   @relation("family", fields: [headOfFamilyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  headOfFamilyId String? @db.ObjectId

  providerCompany   ProviderCompany? @relation(fields: [providerCompanyId], references: [id])
  providerCompanyId String?          @db.ObjectId

  emplyerCases     Case[]   @relation(fields: [employerCasesIds], references: [id])
  employerCasesIds String[] @db.ObjectId

  providerCases     Case[]   @relation("providers", fields: [providerCassesIds], references: [id])
  providerCassesIds String[] @db.ObjectId

  apllication    Case[]   @relation("applicants", fields: [applicationIds], references: [id])
  applicationIds String[] @db.ObjectId

  employerCompany   EmployerCompany? @relation(fields: [employerCompanyId], references: [id])
  employerCompanyId String?          @db.ObjectId

  Task    Task[]   @relation(fields: [taskIds], references: [id])
  taskIds String[] @db.ObjectId
}

model TaskComment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  created     DateTime @default(now())
  authorId    String
  authorName  String
  authorImage String
  Task        Task?    @relation(fields: [taskId], references: [id])
  taskId      String?  @db.ObjectId
}

enum TaskType {
  TASK
  REMINDER
  EVENT
  CASE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  BLOCKED
  IN_REVIEW
  COMPLETED
}

model Task {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  taskStatus  TaskStatus   @default(TO_DO)
  taskType    TaskType     @default(REMINDER)
  priority    TaskPriority @default(LOW)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  createdById   String
  createdByName String

  caseId   String?
  caseName String?

  assignees    User[]   @relation(fields: [assigneesIds], references: [id])
  assigneesIds String[] @db.ObjectId

  comments TaskComment[]
}

model WorkExperience {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  role         String
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  employee     User?          @relation(fields: [employeeId], references: [id])
  employeeId   String?        @db.ObjectId
  compensation Compensation[]
}

model Compensation {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  totalCost        Float
  gross            Float
  net              Float
  paymentsPerMonth Int             @default(1)
  paymentType      PaymentType     @default(SALARY) // Salary Hourly Commission
  currency         String          @default("EUR")
  startDate        DateTime
  WorkExperience   WorkExperience? @relation(fields: [workExperienceId], references: [id])
  workExperienceId String?         @db.ObjectId
}

model TimeOff {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  forYear       Int
  totalDays     Int
  usedDays      Int    @default(0)
  pendingDays   Int    @default(0)
  remainingDays Int

  employee       User?            @relation(fields: [employeeId], references: [id])
  employeeId     String?          @db.ObjectId
  timeOffRequest TimeOffRequest[]
}

model EmployerCompany {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  website   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cases     Case[]
  employees User[]
}

model TimeOffRequest {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  reason     String
  createdAt  DateTime  @default(now())
  approvedAt DateTime?
  declinedAt DateTime?

  requestedBy   User?   @relation(fields: [requestedById], references: [id])
  requestedById String? @db.ObjectId

  approvedBy   User?   @relation("approvedBy", fields: [approvedById], references: [id])
  approvedById String? @db.ObjectId

  timeOffId String   @db.ObjectId
  timeOff   TimeOff? @relation(fields: [timeOffId], references: [id])
}

model Question {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  questionGroups   QuestionGroup[] @relation(fields: [questionGroupIds], references: [id])
  questionGroupIds String[]        @db.ObjectId

  points  Int?
  options String[]
  answers AnswerType[]
  type    QuestionType

  document       Documents?    @relation(fields: [documentId], references: [id])
  documentId     String?       @db.ObjectId
  documentName   String?
  documentType   DocumentType?
  documentFileId String?

  hasErrors Boolean  @default(false)
  comments  String[]

  isExample Boolean?

  providerCompanyId String
}

model Test {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  questionGroups   QuestionGroup[] @relation(fields: [questionGroupIds], references: [id])
  questionGroupIds String[]        @db.ObjectId

  percentageToPass Int?      @default(70)
  percentageScored Int?      @default(0)
  timeLimit        Int?
  startedAt        DateTime?
  endsAt           DateTime?
  createdAt        DateTime? @default(now())

  employee   User?   @relation(fields: [employeeId], references: [id])
  employeeId String? @db.ObjectId

  providerCompanyId String?

  case   Case?   @relation(fields: [caseId], references: [id])
  caseId String? @db.ObjectId
}

model QuestionGroup {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  questions   Question[] @relation(fields: [questionIds], references: [id])
  questionIds String[]   @db.ObjectId

  tests    Test[]   @relation(fields: [testsIds], references: [id])
  testsIds String[] @db.ObjectId

  providerCompanyId String

  isExample Boolean?

  createdAt DateTime? @default(now())
}

type AnswerType {
  id        String
  text      String
  isCorrect Boolean?
  answered  Boolean  @default(false)
}

enum QuestionType {
  TEXT
  SELECT
  MULTISELECT
  RADIO
  CHECKBOX
  FILE
}

enum DocumentType {
  IDENTITY_CARD
  DRIVING_LICENSE
  PASSPORT
  PROOF_OF_ACCOMMODATION
  TRAVEL_TICKET
  VISA
  MEDICAL_INSURANCE
  FINANCIAL_PROOF
  INVOICES
  EMPLOYMENT_CONTRACT
  CRIMINAL_RECORD
  MARRIAGE_CERTIFICATE
  BIRTH_CERTIFICATE
  EDUCATION_DIPLOMA
  EMPLOYMENT_CONFIRMATION_LETTER
  TAX_RECEIPT
  APPLICATION_FORM
  CV
  OTHER
}

enum PaymentType {
  SALARY
  HOURLY
  COMMISSION
}

enum UserRoles {
  ADMIN
  SUPER_ADMIN
  PROVIDER_EMPLOYEE
  PROVIDER_SUPERVISOR
  EMPLOYER_SUPERVISOR
  EMPLOYER_EMPLOYEE
  CUSTOMER
}

enum EmploymentStatus {
  PENDING
  ACTIVE
  INACTIVE
  TERMINATED
}

enum CaseStatus {
  UNASSIGNED // No one is assigned
  PENDING // Customer is collecting documents
  REVIEW // Provider is reviewing documents
  SENT // Application is sent to the embassy and waiting for response
  APPROVED // Application is approved by the embassy
  REJECTED // Application is rejected by the embassy
  CANCELLED // Application is cancelled by the customer
}

enum CaseRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
