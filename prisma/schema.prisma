// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  firstName        String
  lastName         String
  employmentStatus String
  password         String
  createdAt        DateTime? @default(now())

  compensation Compensation[]

  testId String[] @db.ObjectId
  Test   Test[]

  timeOffRequest TimeOffRequest[]
  timeOff TimeOff[]

  timeOffRequestsForApproval TimeOffRequest[] @relation("approvedBy")
}

model Compensation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  totalCost Float
  gross Float
  net Float
  paymentsPerMonth Int @default(1)
  paymentType String @default("salary") // Salary Hourly Commission
  currency String
  employee User? @relation(fields: [employeeId], references: [id])
  employeeId String? @db.ObjectId
  startDate DateTime
}
model TimeOff {
  id String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  forYear Int
  totalDays Int 
  usedDays Int @default(0)
  pendingDays Int @default(0)
  remainingDays Int 

  employee User? @relation(fields: [employeeId], references: [id])
  employeeId String? @db.ObjectId
  timeOffRequest TimeOffRequest[]
}

model TimeOffRequest {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  endDate   DateTime
  reason    String
  createdAt DateTime @default(now())
  approvedAt DateTime?
  declinedAt DateTime?

  requestedBy User? @relation(fields: [requestedById], references: [id])
  requestedById String? @db.ObjectId

  approvedBy User? @relation("approvedBy", fields: [approvedById], references: [id])
  approvedById String? @db.ObjectId

  timeOffId String  @db.ObjectId
  timeOff TimeOff? @relation(fields: [timeOffId], references: [id])
}

model Question {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  questionGroup   QuestionGroup? @relation(fields: [questionGroupId], references: [id])
  points          Int
  answers         AnswerType[]
  answerType      String?
  Test            Test?          @relation(fields: [testId], references: [id])
  testId          String?        @db.ObjectId
  questionGroupId String?        @db.ObjectId
}

model Test {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  questions        Question[]
  percentageToPass Int        @default(70)
  percentageScored Int        @default(0)
  timeLimit        Int
  startedAt        DateTime?
  endsAt           DateTime?
  createdAt        DateTime?  @default(now())

  employee   User?   @relation(fields: [employeeId], references: [id])
  employeeId String? @db.ObjectId
}

model QuestionGroup {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  Question Question[]
}

type AnswerType {
  id        String
  text      String
  isCorrect Boolean
  answered  Boolean
}
