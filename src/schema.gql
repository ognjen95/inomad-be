# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnswerEntity {
  answered: Boolean
  id: String
  isCorrect: Boolean
  text: String
}

input AnswerInput {
  answer: Boolean
  id: String
  isCorrect: Boolean
  text: String
}

enum ApplicantFamilyMembers {
  ALONE
  CHILD
  PARTNER
  PARTNER_AND_CHILD
  SPOUSE
  SPOUSE_AND_CHILD
}

input ApplicantsIdsInput {
  hasSome: String!
}

type AuthReturn {
  accessToken: String!
  idToken: String!
  refreshToken: String!
}

type CaseConnection {
  edges: [CaseEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CaseEdges {
  cursor: String!
  node: CaseEntity!
}

type CaseEntity {
  applicants: [UserEntity!]
  applicantsIds: [String!]!
  createdAt: DateTime!
  documents: [DocumentEntity!]
  documentsIds: [String!]
  education: EducationInfo
  employees: [UserEntity!]
  employeesIds: [String!]
  employerCompanyId: String
  familyInfo: FamilyInfo
  generalInfo: GeneralInfo
  id: String!
  isPrivate: Boolean
  name: String!
  providerCompanyId: String
  providers: [UserEntity!]
  providersIds: [String!]
  status: CaseStatus!
  updatedAt: DateTime!
  workInfo: WorkInfo
}

input CaseQueryOptionsInput {
  caseId: String
  isAvailable: Boolean
  providerCompanyId: String
  userId: String
  where: CaseWhereInput
}

type CaseRequestConnection {
  edges: [CaseRequestEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CaseRequestEdges {
  cursor: String!
  node: CaseRequestEntity!
}

type CaseRequestEntity {
  applicantId: String!
  case: CaseEntity
  caseId: String!
  createdAt: DateTime!
  deadline: DateTime!
  id: String!
  isProposal: Boolean
  providerCompanyId: String!
  status: CaseRequestStatus!
  totalCost: Float
  updatedAt: DateTime!
}

enum CaseRequestStatus {
  APPROVED
  CANCELED
  PENDING
  REJECTED
}

enum CaseStatus {
  APPROVED
  CANCELLED
  PENDING
  REJECTED
  REVIEW
  SENT
  UNASSIGNED
}

input CaseWhereInput {
  applicationId: ApplicantsIdsInput
  isProposal: Boolean
}

type Chat {
  token: String!
  userId: String!
}

type Child {
  birthday: DateTime
  lastName: String
  married: Boolean
  middleName: String
  name: String
}

input ChildInput {
  birthday: DateTime
  lastName: String
  married: Boolean
  middleName: String
  name: String
}

type Compensation {
  currency: String
  employeeId: String!
  gross: Int!
  id: String!
  net: Int
  paymentType: String!
  paymentsPerMonth: Int
  startDate: DateTime!
  totalCost: Int!
}

input CreateCaseInput {
  applicantsIds: [String!]!
  employeesIds: [String!] = []
  isPrivate: Boolean = false
  name: String!
  providersIds: [String!] = []
}

input CreateCompensationInput {
  currency: String
  employeeId: String!
  gross: Int!
  net: Int
  paymentType: String!
  paymentsPerMonth: Int
  startDate: DateTime!
  totalCost: Int!
}

input CreateDocumentInput {
  caseId: String
  customerId: String
  documentType: DocumentType!
  fileId: String
  name: String!
  providerCompanyId: String
}

input CreateProviderCompanyInput {
  email: String!
  firstName: String!
  lastName: String!
  middleName: String = ""
  name: String!
  password: String!
  website: String
}

input CreateQuestionGroupInput {
  name: String!
  questions: [CreateQuestionInput!]!
  templateId: String
}

input CreateQuestionInput {
  comments: [String!]
  documentId: String
  documentName: String
  documentType: DocumentType
  hasErrors: Boolean
  options: [String!]!
  points: Float
  questions: [UpdateQuestionInput!]
  testId: String
  text: String!
  type: QuestionType!
}

input CreateTaskInput {
  assigneeIds: [String!]
  caseId: String
  description: String
  endDate: DateTime!
  id: String
  name: String!
  priority: TaskPriority!
  startDate: DateTime!
  status: TaskStatus!
  type: TaskType!
}

input CreateTestInput {
  caseId: String
  employeeId: String
  endsAt: DateTime
  name: String!
  percentageScored: Int
  percentageToPass: Int
  providerCompanyId: String
  questionGroupIds: [String!]!
  timeLimit: Int
}

input CreateTimeOffInput {
  forYear: Int!
  name: String!
  totalDays: Int!
}

input CreateTimeOffRequestInput {
  endDate: DateTime
  reason: String!
  requestedById: String!
  startDate: DateTime
  timeOffId: String!
}

input CreateUserInput {
  birthday: DateTime!
  companyId: String
  email: String!
  firstName: String!
  lastName: String!
  middleName: String
  password: String!
  userRole: UserRoles!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DocumentConnection {
  edges: [DocumentEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DocumentEdges {
  cursor: String!
  node: DocumentEntity!
}

type DocumentEntity {
  caseId: String
  createdAt: DateTime!
  customerId: String
  documentType: DocumentType!
  fileId: String
  id: String!
  name: String!
  providerCompanyId: String
}

enum DocumentType {
  APPLICATION_FORM
  BIRTH_CERTIFICATE
  CRIMINAL_RECORD
  CV
  DRIVING_LICENSE
  EDUCATION_DIPLOMA
  EMPLOYMENT_CONFIRMATION_LETTER
  EMPLOYMENT_CONTRACT
  FINANCIAL_PROOF
  IDENTITY_CARD
  INVOICES
  MARRIAGE_CERTIFICATE
  MEDICAL_INSURANCE
  OTHER
  PASSPORT
  PROOF_OF_ACCOMMODATION
  TAX_RECEIPT
  TRAVEL_TICKET
  VISA
}

type EducationInfo {
  confirmationLetterFileId: String
  degree: String
  diplomaFileId: String
  university: String
}

input EmployeeStatusFilterInput {
  contains: String
  eq: String
  in: [String!]
  not: String
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  PENDING
  TERMINATED
}

type FamilyInfo {
  children: [Child!]
  familyMembers: ApplicantFamilyMembers
  spouse: Partner
}

input FilterInput {
  contains: String
  employeeStatus: EmployeeStatusFilterInput
  eq: String
  providerCompanyId: String
  userRoles: [UserRoles!]
}

type GeneralInfo {
  birthday: DateTime
  email: String
  firstName: String
  lastName: String
  middleName: String
  nationality: String
  passportFileId: String
  phone: String
}

type Mutation {
  assignEmployeeToCase(args: UpdateCaseInput!): MutationReturn!
  assignTemplate(caseId: String!, templateId: String!): TestEntity!
  createCase(args: CreateCaseInput!): MutationReturn!
  createCaseProposal(caseId: String!, deadline: DateTime!, price: Float!): MutationReturn!
  createCaseRequest(providerCompanyId: String!): MutationReturn!
  createChat(chatName: String!, userIds: [String!]!): String!
  createCompensation(createCompensationInput: CreateCompensationInput!): Compensation!
  createDocument(args: CreateDocumentInput!): MutationReturn!
  createProviderCompany(args: CreateProviderCompanyInput!): MutationReturn!
  createQuestion(createQuestionInput: CreateQuestionInput!): QuestionEntity!
  createQuestionGroup(createQuestionGroupInput: CreateQuestionGroupInput!): QuestionGroupEntity!
  createTask(createTaskInput: CreateTaskInput!): TaskEntity!
  createTemplate(args: CreateTestInput!): TestEntity!
  createTimeOff(createTimeOffInput: CreateTimeOffInput!): TimeOffEntity!
  createTimeOffRequest(createTimeOffRequestInput: CreateTimeOffRequestInput!): TimeOffRequestEntity!
  createUser(args: CreateUserInput!): MutationReturn!
  login(email: String!, password: String!): AuthReturn!
  registerCustomer(args: CreateUserInput!): MutationReturn!
  removeCaseRequest(id: Int!): CaseRequestEntity!
  removeCompensation(id: Int!): Compensation!
  removeUser(id: String!): UserEntity!
  updateCase(args: UpdateCaseInput!): MutationReturn!
  updateCaseAdditionalDocuments(args: UpdateCaseAdditionalDocumentsInput!): MutationReturn!
  updateCaseEducationInfo(args: UpdateCaseEducationInfoInput!): MutationReturn!
  updateCaseFamilyInfo(args: UpdateCaseFamilyInfoInput!): MutationReturn!
  updateCaseGeneralInfo(args: UpdateCaseGeneralInfoInput!): MutationReturn!
  updateCaseRequest(args: UpdateCaseRequestInput!): MutationReturn!
  updateCaseWorkInfo(args: UpdateCaseWorkInfoInput!): MutationReturn!
  updateDocument(args: UpdateDocumentInput!): MutationReturn!
  updateQuestion(updateQuestionInput: UpdateQuestionInput!): QuestionEntity!
  updateQuestionGroup(args: UpdateQuestionGroupInput!): QuestionGroupEntity!
  updateTest(args: UpdateTestInput!): TestEntity!
  updateTimeOff(updateTimeOffInput: UpdateTimeOffInput!): TimeOffEntity!
  updateTimeOffRequest(updateTimeOffRequestInput: UpdateTimeOffRequestInput!): TimeOffRequestEdgesEntity!
  updateUser(args: UpdateUserInput!): UserEntity!
}

type MutationReturn {
  error: String
  errorMsg: String
  isCompleted: Boolean!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PaginationInput {
  cursor: String
  orderBy: String
  skip: Int
  take: Int
}

type Partner {
  birthday: DateTime
  lastName: String
  married: Boolean
  middleName: String
  name: String
}

input PartnerInput {
  birthday: DateTime
  lastName: String
  married: Boolean
  middleName: String
  name: String
}

type PresignedUrlReturn {
  id: String!
  link: String!
}

type ProviderCompanyConnection {
  edges: [ProviderCompanyEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProviderCompanyEdges {
  cursor: String!
  node: ProviderCompanyEntity!
}

type ProviderCompanyEntity {
  case(id: String!): CaseEntity!
  caseRequests(options: CaseQueryOptionsInput): CaseRequestConnection!
  cases(options: CaseQueryOptionsInput): CaseConnection!
  createdAt: DateTime!
  email: String!
  employees(args: UserQueryOptionsInput): UserConnection!
  id: String!
  name: String!
  rating: Int!
  updatedAt: DateTime!
  website: String
}

type Query {
  availableCases: CaseConnection!
  case(id: String!): CaseEntity!
  caseRequest(id: Int!): CaseRequestEntity!
  caseRequests(options: CaseQueryOptionsInput): CaseRequestConnection!
  cases(options: CaseQueryOptionsInput!): CaseConnection!
  chatAccessToken: Chat!
  compensation(id: Int!): Compensation!
  document(id: String!): DocumentEntity!
  documents: DocumentConnection!
  downloadLink(id: String!): String!
  findAllQuestion(QueryOptionsInput: QueryOptionsInput): QuestionEntityEdgesEntity!
  findTestById(id: String!): TestEntity!
  presignedUrl(fileNames: [String!]!): [PresignedUrlReturn]!
  providerCompanies: ProviderCompanyConnection!
  providerCompany: ProviderCompanyEntity
  questionGroups(args: QuestionGroupOptionsInput): QuestionGroupConnection!
  tasks(options: TaskQueryOptionsInput): TaskConnection!
  templates(QueryOptionsInput: TestQueryOptionsInput): TemplateConnection!
  timeOffs: TimeOffConnection!
  timeOffsByUserId(employeeId: String!, forYear: Float!): TimeOffConnection!
  userById(id: String!): UserEntity!
  users(args: UserQueryOptionsInput): UserConnection!
}

input QueryOptionsInput {
  filters: FilterInput
  pagination: PaginationInput
}

type QuestionEdges {
  cursor: String!
  node: QuestionEntity!
}

type QuestionEntity {
  answerType: String
  answers: [AnswerEntity]
  comments: [String!]
  document: DocumentEntity
  documentFileId: String
  documentId: String
  documentName: String
  documentType: DocumentType
  hasErrors: Boolean
  id: String!
  isExample: Boolean
  options: [String!]!
  points: Float
  providerCompanyId: String
  questionGroupId: String
  questionGroups: [QuestionGroupEntity!]
  testId: String
  text: String!
  type: QuestionType!
}

type QuestionEntityEdgesEntity {
  edges: [QuestionEdges!]!
  totalCount: Int!
}

type QuestionGroupConnection {
  edges: [QuestionGroupsEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QuestionGroupEntity {
  id: String!
  isExample: Boolean
  name: String!
  providerCompanyId: String
  questionIds: [String!]
  questions: [QuestionEntity!]
  testId: String
}

input QuestionGroupIdInput {
  equals: String
  in: [String!]
}

input QuestionGroupOptionsInput {
  where: QuestionGroupWhere
}

input QuestionGroupWhere {
  id: QuestionGroupIdInput
  isExample: Boolean = true
  providerCompanyId: String
}

type QuestionGroupsEdges {
  cursor: String!
  node: QuestionGroupEntity!
}

enum QuestionType {
  CHECKBOX
  FILE
  MULTISELECT
  RADIO
  SELECT
  TEXT
}

type TaskConnection {
  edges: [TaskEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TaskEdges {
  cursor: String!
  node: TaskEntity!
}

type TaskEntity {
  assignees: [UserEntity!]
  assigneesIds: [String!]
  caseId: String
  caseName: String
  createdById: String!
  createdByName: String!
  description: String
  endDate: DateTime!
  id: String!
  name: String!
  priority: TaskPriority!
  startDate: DateTime!
  taskStatus: TaskStatus!
  taskType: TaskType!
}

"""Priority of the task"""
enum TaskPriority {
  HIGH
  LOW
  MEDIUM
}

input TaskQueryOptionsInput {
  assigneeIds: [String!]
  caseId: String
  description: String
  endDate: DateTime
  id: String
  name: String
  priority: TaskPriority
  startDate: DateTime
  status: TaskStatus
  type: TaskType
}

"""Status of the task"""
enum TaskStatus {
  BLOCKED
  COMPLETED
  IN_PROGRESS
  IN_REVIEW
  TO_DO
}

"""Type of the task"""
enum TaskType {
  CASE
  EVENT
  REMINDER
  TASK
}

type TemplateConnection {
  edges: [TemplateEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TemplateEdges {
  cursor: String!
  node: TestEntity!
}

type TestEntity {
  caseId: String
  createdAt: DateTime
  employeeId: String
  endsAt: DateTime
  id: String!
  name: String!
  percentageScored: Int
  percentageToPass: Int
  providerCompanyId: String
  questionGroupIds: [String!]
  questionGroups: [QuestionGroupEntity!]
  startedAt: DateTime
  timeLimit: Int
}

input TestQueryOptionsInput {
  caseId: String
  employeeId: String
  endsAt: DateTime
  id: String
  name: String
  percentageScored: Int
  percentageToPass: Int
  providerCompanyId: String
  questionGroupIds: [String!]
  startedAt: DateTime
  timeLimit: Int
}

type TimeOffConnection {
  edges: [TimeOffEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TimeOffEdges {
  cursor: String!
  node: TimeOffEntity!
}

type TimeOffEntity {
  employee: UserEntity
  employeeId: String
  forYear: Int!
  id: String!
  name: String!
  pendingDays: Int!
  remainingDays: Int!
  timeOffRequests(timeOffRequestQueryOptions: TimeOffRequestQueryOptions): TimeOffRequestEdgesEntity!
  totalDays: Int!
  usedDays: Int!
}

type TimeOffRequestEdges {
  cursor: String!
  node: TimeOffRequestEntity!
}

type TimeOffRequestEdgesEntity {
  edges: [TimeOffRequestEdges!]!
  totalCount: Int!
}

type TimeOffRequestEntity {
  approvedAt: DateTime
  approvedById: String
  createdAt: DateTime
  declinedAt: DateTime
  endDate: DateTime
  id: String!
  reason: String!
  requestedById: String!
  startDate: DateTime
  timeOffId: String!
}

input TimeOffRequestQueryOptions {
  approvedById: String
  isApproved: Boolean
  isDeclined: Boolean
  requestedById: String
  timeOffId: String
}

input UpdateCaseAdditionalDocumentsInput {
  additionalDocuments: [CreateDocumentInput!]!
  caseId: String!
}

input UpdateCaseEducationInfoInput {
  confirmationLetterFileId: String!
  degree: String!
  diplomaFileId: String!
  id: String!
  university: String!
}

input UpdateCaseFamilyInfoInput {
  children: [ChildInput!]
  familyMembers: ApplicantFamilyMembers
  id: String!
  spouse: PartnerInput
}

input UpdateCaseGeneralInfoInput {
  birthday: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  middleName: String!
  nationality: String!
  passportFileId: String!
  phone: String!
}

input UpdateCaseInput {
  applicantsIds: [String!]
  employeesIds: [String!] = []
  employerCompanyId: String
  id: String!
  isPrivate: Boolean = false
  name: String
  providerCompanyId: String
  providersIds: [String!] = []
  status: CaseStatus
}

input UpdateCaseRequestInput {
  id: String!
  status: CaseRequestStatus! = PENDING
}

input UpdateCaseWorkInfoInput {
  contractFileId: String
  contractType: String
  cvFileId: String
  id: String!
  invoicesFilesIds: [String!]
  jobTitle: String
  monthlyIncome: Int
  yearsOfExperience: String
}

input UpdateDocumentInput {
  caseId: String
  customerId: String
  documentType: DocumentType
  fileId: String
  id: String!
  name: String
  providerCompanyId: String
}

input UpdateQuestionGroupInput {
  id: String!
  questions: [UpdateQuestionInput]
}

input UpdateQuestionInput {
  """List of ids of the questions that have been answered"""
  answeredIds: [String!]
  answers: [AnswerInput!]!
  comments: [String!]
  document: UpdateDocumentInput
  documentId: String
  hasErrors: Boolean
  id: String!
  options: [String!]
  points: Float
  text: String!
}

input UpdateTestInput {
  caseId: String
  employeeId: String
  endsAt: DateTime
  id: String!
  name: String
  percentageScored: Int
  percentageToPass: Int
  providerCompanyId: String
  questionGroupIds: [String!]
  startedAt: DateTime!
  timeLimit: Int
}

input UpdateTimeOffInput {
  approvedDays: Int
  employeeId: String
  forYear: Int
  name: String
  remainingDays: Int
  timeOffId: String!
  totalDays: Int
  usedDays: Int
}

input UpdateTimeOffRequestInput {
  approvedAt: DateTime
  approvedBy: String!
  declinedAt: DateTime
  id: String!
}

input UpdateUserInput {
  birthday: DateTime
  companyId: String
  email: String
  employmentStatus: EmploymentStatus
  firstName: String
  id: String!
  lastName: String
  middleName: String
  password: String
  providerCompanyId: String
  userRole: UserRoles
}

type UserConnection {
  edges: [UserEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdges {
  cursor: String!
  node: UserEntity!
}

type UserEntity {
  applicationIds: [String!]
  birthday: DateTime
  case(id: String!): CaseEntity!
  caseId: String!
  cases(args: UserQueryOptionsInput): CaseConnection!
  createdAt: DateTime!
  email: String!
  employmentStatus: EmploymentStatus!
  externalId: String!
  family: [UserEntity!]
  firstName: String!
  id: String!
  lastName: String!
  middleName: String
  providerCassesIds: [String!]
  providerCompanyId: String
  userRole: UserRoles!
}

input UserQueryOptionsInput {
  providerCompanyId: String
  userId: String
  userRoles: [UserRoles!]
  where: UserWhereInput
}

enum UserRoles {
  ADMIN
  CUSTOMER
  EMPLOYER_EMPLOYEE
  EMPLOYER_SUPERVISOR
  PROVIDER_EMPLOYEE
  PROVIDER_SUPERVISOR
  SUPER_ADMIN
}

input UserWhereInput {
  applicationId: ApplicantsIdsInput!
}

type WorkInfo {
  contractFileId: String
  contractType: String
  cvFileId: String
  invoicesFilesIds: [String!]
  jobTitle: String
  monthlyIncome: Int
  yearsOfExperience: String
}