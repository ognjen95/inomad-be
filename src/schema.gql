# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AnswerEntity {
  answered: Boolean!
  id: String!
  isCorrect: Boolean!
  text: String!
}

input AnswerInput {
  answered: Boolean!
  id: String!
  isCorrect: Boolean!
  text: String!
}

input CreateQuestionGroupInput {
  name: String!
}

input CreateQuestionInput {
  answers: [AnswerInput!]
  points: Float!
  questionGroup: String
  text: String!
}

input CreateTestInput {
  employeeId: String
  endsAt: DateTime
  name: String!
  percentageScored: Int
  percentageToPass: Int!
  questionIds: [String!]!
  timeLimit: Int
}

input CreateTimeOffInput {
  forYear: Int!
  name: String!
  totalDays: Int!
}

input CreateUserInput {
  email: String!
  employmentStatus: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Edges {
  cursor: String!
  node: User!
}

input EmployeeStatusFilterInput {
  contains: String
  eq: String
  in: [String!]
  not: String
}

input FilterInput {
  contains: String
  employeeStatus: EmployeeStatusFilterInput
  eq: String
}

type Mutation {
  createQuestion(createQuestionInput: CreateQuestionInput!): QuestionEntity!
  createQuestionGroup(createQuestionGroupInput: CreateQuestionGroupInput!): QuestionGroupEntity!
  createTest(createTestInput: CreateTestInput!): TestEntity!
  createTimeOff(createTimeOffInput: CreateTimeOffInput!): TimeOffEntity!
  createUser(createUserInput: CreateUserInput!): User!
  removeUser(id: String!): User!
  updateQuestion(updateQuestionInput: UpdateQuestionInput!): QuestionEntity!
  updateTest(updateTestInput: UpdateTestInput!): TestEntity!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

input PaginationInput {
  cursor: String
  orderBy: String
  skip: Int
  take: Int
}

type Query {
  findAllQuestion(QueryOptionsInput: QueryOptionsInput): QuestionEntityEdgesEntity!
  findAllQuestionGroups(QueryOptionsInput: QueryOptionsInput): QuestionGroupsEntityEdgesEntity!
  findAllTests(QueryOptionsInput: QueryOptionsInput): TestsEntityEdgesEntity!
  findAllTimeOffs: TimeOffEntityEdgesEntity!
  findAllUsers(QueryOptionsInput: QueryOptionsInput): UserEdgesEntity!
  findTestById(id: String!): TestEntity!
  findTimeOffsByEmployeeId(employeeId: String!, forYear: Float!): [TimeOffEntity!]!
  findUserById(id: String!): User!
}

input QueryOptionsInput {
  filters: FilterInput
  pagination: PaginationInput
}

type QuestionEdges {
  cursor: String!
  node: QuestionEntity!
}

type QuestionEntity {
  answerType: String
  answers: [AnswerEntity!]
  id: String!
  points: Float!
  questionGroup: QuestionGroupEntity
  testId: String
  text: String!
}

type QuestionEntityEdgesEntity {
  edges: [QuestionEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QuestionGroupEntity {
  Question: [QuestionEntity!]
  id: String!
  name: String!
}

type QuestionGroupsEdges {
  cursor: String!
  node: QuestionGroupEntity!
}

type QuestionGroupsEntityEdgesEntity {
  edges: [QuestionGroupsEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TestEntity {
  createdAt: DateTime
  employeeId: String
  endsAt: DateTime
  id: String!
  name: String!
  percentageScored: Int
  percentageToPass: Int!
  questions: [QuestionEntity!]!
  startedAt: DateTime
  timeLimit: Int
}

type TestsEdges {
  cursor: String!
  node: TestEntity!
}

type TestsEntityEdgesEntity {
  edges: [TestsEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TimeOffEdges {
  cursor: String!
  node: TimeOffEntity!
}

type TimeOffEntity {
  employee: User
  employeeId: String
  forYear: Int!
  id: String!
  name: String!
  pendingDays: Int!
  remainingDays: Int!
  totalDays: Int!
  usedDays: Int!
}

type TimeOffEntityEdgesEntity {
  edges: [TimeOffEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UpdateQuestionInput {
  answeredIds: [String!]!
  id: String!
}

input UpdateTestInput {
  employeeId: String
  endsAt: DateTime
  id: String!
  name: String
  percentageScored: Int
  percentageToPass: Int
  questionIds: [String!]
  startedAt: DateTime!
  timeLimit: Int
}

input UpdateUserInput {
  email: String
  employmentStatus: String
  firstName: String
  id: String!
  lastName: String
  password: String
}

type User {
  createdAt: DateTime
  email: String!
  employmentStatus: String!
  firstName: String!
  id: String!
  lastName: String!
  password: String!
}

type UserEdgesEntity {
  edges: [Edges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}